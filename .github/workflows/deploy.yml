# 워크플로우의 이름을 지정합니다.
name: Frontend CI/CD Pipeline

# ===================================================================
#  1. 워크플로우 실행 조건 (Trigger)
# ===================================================================
on:
  # main 브랜치에 직접 push 할 때
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

  # main 브랜치로 Pull Request가 merge 될 때
  pull_request:
    types: [ closed ]
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

# ===================================================================
#  2. 실행될 작업 (Jobs)
# ===================================================================
jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      # -------------------------------------------------------------------
      #  단계 1: 소스 코드 준비
      # -------------------------------------------------------------------
      - name: Checkout Source Code
        uses: actions/checkout@v3
      
      # -------------------------------------------------------------------
      #  단계 2: Docker Hub 로그인
      # -------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------------------------------------------
      #  단계 3: 이미지 빌드 및 푸시, 그리고 DIGEST 캡처
      # -------------------------------------------------------------------
      - name: Build and Push Docker Image
        id: build-and-push # 이 단계에 ID를 부여합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front:latest
          no-cache: true


      # -------------------------------------------------------------------
      #  단계 4: EC2 서버에 배포 (DIGEST 지정 방식)
      # -------------------------------------------------------------------
      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST_IP }}
          username: ${{ secrets.AWS_HOST_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/app
            
            # .env 파일에서 프론트엔드 이미지 정보만 찾아 삭제하고 새로 추가합니다.
            sed -i '/^FRONTEND_IMAGE=/d' .env
            echo "FRONTEND_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front@${{ steps.build-and-push.outputs.digest }}" >> .env

            # DB 정보 등 다른 변수들도 안전하게 추가합니다.
            sed -i '/^DOCKERHUB_USERNAME=/d' .env
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" >> .env
            sed -i '/^DB_USERNAME_PROD=/d' .env
            echo "DB_USERNAME_PROD=${{ secrets.DB_USERNAME_PROD }}" >> .env
            sed -i '/^DB_PASSWORD_PROD=/d' .env
            echo "DB_PASSWORD_PROD=${{ secrets.DB_PASSWORD_PROD }}" >> .env
            
            echo "--- Current .env file content ---"
            cat .env

            docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
            docker compose pull frontend
            docker compose up -d --force-recreate frontend
            docker image prune -af

            echo "--- Final container status ---"
            docker ps


      # -------------------------------------------------------------------
      # 단계 5: CloudFront 캐시 무효화
      # -------------------------------------------------------------------
      - name: Invalidate CloudFront Cache
        uses: chetan/invalidate-cloudfront-action@v2
        env:
          DISTRIBUTION: ${{ secrets.AWS_CLOUDFRONT_DISTRIBUTION_ID }}
          PATHS: "/*"
          AWS_REGION: "ap-northeast-2" # AWS 리전 (서울은 ap-northeast-2)
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}