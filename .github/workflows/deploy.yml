# 워크플로우의 이름을 지정합니다.
name: Frontend CI/CD Pipeline

# ===================================================================
#  1. 워크플로우 실행 조건 (Trigger)
# ===================================================================
# ★★★★★ 본인의 프론트엔드 기본 브랜치 이름이 'main'이라면 아래 'master'를 모두 'main'으로 수정하세요! ★★★★★
on:
  # 1. main 브랜치에 직접 push 할 때
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'  # 모든 마크다운 파일 무시
      - 'docs/**'  # docs 폴더 아래의 모든 변경 무시

  # 2. main 브랜치로 Pull Request가 merge 될 때
  pull_request:
    types: [ closed ] # PR이 닫혔을 때 (merged 또는 unmerged)
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

# ===================================================================
#  2. 실행될 작업 (Jobs)
# ===================================================================
jobs:
  build-and-deploy:
    # Pull Request가 'Merge' 되었을 때만 이 작업을 실행하도록 조건을 추가합니다.
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)
    
    # 이 작업은 GitHub가 제공하는 최신 우분투 가상 서버에서 실행됩니다.
    runs-on: ubuntu-latest

    # 작업 안에서 순서대로 실행될 단계(Steps)들을 정의합니다.
    steps:
      # -------------------------------------------------------------------
      #  단계 1: 소스 코드 준비
      # -------------------------------------------------------------------
      # GitHub 저장소의 소스 코드를 가상 서버 안으로 내려받습니다.
      - name: Checkout Source Code
        uses: actions/checkout@v3
      
      # -------------------------------------------------------------------
      #  단계 2: Docker 이미지 빌드 및 Docker Hub에 업로드
      # -------------------------------------------------------------------
      # GitHub Secrets를 사용하여 Docker Hub에 로그인합니다.
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # 디버깅 할때, .env.development 파일을 제거하여 .env.production 파일을 사용하도록 합니다.
      - name: Prepare for Production Build
        run: |
          echo "Removing .env.development to ensure production-only settings are used."
          rm -f .env.development

      # Dockerfile을 사용하여 이미지를 빌드하고, Docker Hub에 푸시(업로드)합니다.
      # 이 과정 안에서 Dockerfile의 지시에 따라 자동으로 npm install 및 npm run build가 일어납니다.
      - name: Build Docker Image with Basic Commands
        id: build-image # 이 단계에 ID를 부여합니다.
        run: |
          docker build \
            --build-arg NEXT_PUBLIC_API_BASE_URL="" \
            --no-cache \
            -t ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front:latest \
            .
          # 빌드된 이미지의 정확한 DIGEST를 출력하여 다음 단계에서 사용합니다.
          echo "image_digest=$(docker inspect --format='{{index .RepoDigests 0}}' ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front:latest)" >> $GITHUB_OUTPUT

            - name: Push Docker Image and Verify Digest
        run: |
          echo "Pushing image to Docker Hub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front:latest
          echo "Pushed image digest is: ${{ steps.build-image.outputs.image_digest }}"
          
      # 배포 단계는 수정했던 "완전 초기화" 버전으로 유지합니다.
      - name: Push Docker Image and Verify Digest
        run: |
          echo "Pushing image to Docker Hub..."
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front:latest
          echo "Pushed image digest is: ${{ steps.build-image.outputs.image_digest }}"
          
      # 배포 단계는 수정했던 "완전 초기화" 버전으로 유지합니다.
      - name: Deploy to EC2 Instance
        run: | # ssh-action 대신 직접 명령어를 실행하여 로그를 더 자세히 봅니다.
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private_key.pem
          chmod 600 private_key.pem
          
          ssh -o StrictHostKeyChecking=no -i private_key.pem ${{ secrets.AWS_HOST_USERNAME }}@${{ secrets.AWS_HOST_IP }} '
            cd ~/app
            
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "DB_USERNAME_PROD=${{ secrets.DB_USERNAME_PROD }}" >> .env
            echo "DB_PASSWORD_PROD=${{ secrets.DB_PASSWORD_PROD }}" >> .env
            
            docker compose down
            docker rmi $(docker images -q ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front) || true
            
            # 여기서 액션 로그에 찍힌 바로 그 DIGEST를 사용합니다.
            echo "Pulling the exact image with digest: ${{ steps.build-image.outputs.image_digest }}"
            docker pull ${{ steps.build-image.outputs.image_digest }}
            
            docker compose up -d
            
            echo "Final verification on EC2:"
            docker images --digests | grep 3thproject-front
          '