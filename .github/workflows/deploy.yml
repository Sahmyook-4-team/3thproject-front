# 워크플로우의 이름을 지정합니다.
name: Frontend CI/CD Pipeline

# ===================================================================
#  1. 워크플로우 실행 조건 (Trigger)
# ===================================================================
on:
  # main 브랜치에 직접 push 할 때
  push:
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

  # main 브랜치로 Pull Request가 merge 될 때
  pull_request:
    types: [ closed ]
    branches: [ main ]
    paths-ignore:
      - '**.md'
      - 'docs/**'

# ===================================================================
#  2. 실행될 작업 (Jobs)
# ===================================================================
jobs:
  build-and-deploy:
    if: github.event_name == 'push' || (github.event.pull_request.merged == true)
    runs-on: ubuntu-latest
    steps:
      # -------------------------------------------------------------------
      #  단계 1: 소스 코드 준비
      # -------------------------------------------------------------------
      - name: Checkout Source Code
        uses: actions/checkout@v3
      
      # -------------------------------------------------------------------
      #  단계 2: Docker Hub 로그인
      # -------------------------------------------------------------------
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # -------------------------------------------------------------------
      #  단계 3: 이미지 빌드 및 푸시, 그리고 DIGEST 캡처
      # -------------------------------------------------------------------
      - name: Build and Push Docker Image
        id: build-and-push # 이 단계에 ID를 부여합니다.
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/3thproject-front:latest
          no-cache: true
          # Dockerfile에 ARG/ENV를 추가하여 빌드 인자를 전달하는 것이 가장 확실합니다.
          build-args: |
            NEXT_PUBLIC_API_BASE_URL=""

      # -------------------------------------------------------------------
      #  단계 4: EC2 서버에 배포 (DIGEST 지정 방식)
      # -------------------------------------------------------------------
      - name: Deploy to EC2 Instance
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.AWS_HOST_IP }}
          username: ${{ secrets.AWS_HOST_USERNAME }}
          key: ${{ secrets.AWS_SSH_PRIVATE_KEY }}
          script: |
            cd ~/app
            
            echo "DOCKERHUB_USERNAME=${{ secrets.DOCKERHUB_USERNAME }}" > .env
            echo "DB_USERNAME_PROD=${{ secrets.DB_USERNAME_PROD }}" >> .env
            echo "DB_PASSWORD_PROD=${{ secrets.DB_PASSWORD_PROD }}" >> .env
            
            # 이전 단계에서 푸시된 이미지의 정확한 DIGEST를 가져옵니다.
            IMAGE_DIGEST="${{ steps.build-and-push.outputs.digest }}"
            echo "The exact image digest to be deployed is: ${IMAGE_DIGEST}"
            
            # 1. 기존 서비스를 중단합니다.
            docker compose down
            
            # 2. Docker Compose 파일에 정의된 이미지를 강제로 다시 Pull 합니다.
            #    이 명령어는 docker-compose.yml 파일에 명시된 이미지 (예: :latest)를
            #    Docker Hub에서 최신 버전으로 가져옵니다.
            docker compose pull
            
            # 3. 새로운 컨테이너를 생성하고 시작합니다.
            #    --force-recreate: 기존 컨테이너가 있더라도 강제로 재생성합니다.
            #    --build: Dockerfile이 변경되었을 때 빌드를 다시 수행합니다. (여기서는 필요 없을 수 있습니다.)
            docker compose up -d --force-recreate
            
            echo "Final verification on EC2:"
            # 실행 중인 컨테이너와 사용 중인 이미지 확인 (수정된 서비스 이름 사용)
            docker ps -a
            docker images --digests | grep 3thproject-front